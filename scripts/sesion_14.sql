
CREATE TABLE cuentas1(
    id INT GENERATED BY DEFAULT AS IDENTITY,
    cliente VARCHAR(100) NOT NULL,
    balance numeric NOT NULL
 );

INSERT INTO cuentas1 (cliente,balance)
VALUES('Jorge',10000),
	  ('Héctor',10000),
	  ('Ramón',10000),
	  ('Luis',10000),
      ('José',10000),
      ('Sofía',10000),
      ('Leticia',10000),
      ('Gloria',10000);
	  
select * from cuentas1;	 

---- transferir(3,8,300)
create or replace procedure transferir(int, int, numeric)
language plpgsql    
as 
$$
begin
    update cuentas1 set balance = balance - $3 where id = $1;
    update cuentas1 set balance = balance + $3 where id = $2;
end;
$$;	  

call transferir(8,6,1500);

select * from cuentas1;

------------------
------------------
------------------

create table cuentas_antes(
    id INT GENERATED BY DEFAULT AS IDENTITY,
    cliente VARCHAR(100) NOT NULL,
    balance numeric NOT NULL,
    usuario varchar(250) NOT NULL,
    Fecha date,
    tiempo time);
	
select * from cuentas_antes;

create or replace function revisar() 
returns trigger
as
$$
declare
    Usuario Varchar(250) = user; 
    Fecha date = current_date;
    Tiempo time = current_time;
begin
    INSERT INTO cuentas_antes values (old.id,old.cliente,old.balance, Usuario, Fecha, Tiempo);
    return new;
end
$$
language plpgsql;


create trigger antes_actualizar  --- nombre del disparador  
before update on cuentas1  --- cuándo se va a activar
for each row execute procedure revisar();  --- qué es lo que va a realizar

select * from cuentas1;

call transferir(8,6,1500);
select * from cuentas1;
select * from cuentas_antes;

call transferir(7,3,500);
select * from cuentas1;
select * from cuentas_antes;

call transferir(8,3,500);
select * from cuentas1;
select * from cuentas_antes;

----------------------
----------------------
----------------------

CREATE TABLE cuentas (
    id SERIAL PRIMARY KEY,
    cliente_id INT NOT NULL,
    balance NUMERIC NOT NULL CHECK (balance >= 0)
);

-- Insertar registros en la tabla cuentas
INSERT INTO cuentas (cliente_id, balance)
VALUES 
    (1, 10000),
    (1, 5000),
    (2, 20000),
    (3, 15000),
    (1, 3000);

select * from cuentas;

---Crear totales
create table totales as
	select cliente_id, sum(balance) as total_balance
	from cuentas
	group by cliente_id;
	
select * from totales;	
select * from cuentas;

-- Crear la función de actualización
CREATE OR REPLACE FUNCTION actualizar_totales()
RETURNS TRIGGER AS $$
BEGIN
    -- Actualiza el total del cliente afectado
    UPDATE totales
    SET total_balance = (SELECT SUM(balance) FROM cuentas WHERE cliente_id = NEW.cliente_id)
    WHERE cliente_id = NEW.cliente_id;

    -- Si no existe un registro en totales para este cliente, lo insertamos
    IF NOT FOUND THEN
        INSERT INTO totales (cliente_id, total_balance)
        VALUES (NEW.cliente_id, New.balance);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Crear el disparador
CREATE TRIGGER trigger_actualizar_totales
AFTER INSERT OR UPDATE OR DELETE ON cuentas
FOR EACH ROW
EXECUTE FUNCTION actualizar_totales();

select * from totales;
select * from cuentas;

insert into cuentas(cliente_id,balance) values (1,1700);

insert into cuentas(cliente_id,balance) values (10,13500);

insert into cuentas(cliente_id,balance) values (2,12000);





